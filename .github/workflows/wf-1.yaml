name: Monorepo-wf-1

on:
  workflow_dispatch:
    inputs:
      modules:
        description: 'List the modules to build, white space delimited'
        required: true

  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }} 
  cancel-in-progress: true

jobs:
  initialize_ci:
    runs-on: ubuntu-20.04
    outputs:
      pr_number: ${{ steps.findPr.outputs.number }}
    steps:
      - uses: hmarr/debug-action@v2

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
    
      - uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open

      # This will echo "Your PR is 7", or be skipped if there is no current PR.
      - run: echo "$PR"
        if: success() && steps.findPr.outputs.number
        env:
          PR: ${{ toJson(steps.findPr.outputs) }}

  changes:
    name: Get changes
    runs-on: ubuntu-20.04
    needs:
      - initialize_ci

    # outputs:
    #   matrix: "{\"container\": ${{ steps.reduce.outputs.containers }} }"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            changed:
            - '*'
      - name: Store changed files in file
        run: echo '${{ toJson(steps.filter.outputs) }}' > changes.json

      - name: Store changed containers
        id: reduce
        run: |
          echo "${{ toJson(steps.filter.outputs) }}"
          # .changed_files | fromjson | .[] |= sub("(?<first_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+)"; "\(.first_directory)") | unique
          CONTAINERS=$(jq -c --raw-output '.changed_files | fromjson | .[] |= sub("(?<filepath>(?<first_directory>(?<root1>[/]?)[^/]+)/(?<second_directory>(?<root2>[/]?)[^/]+)(?<extra_paths>.+))"; "\(.first_directory)") | unique' changes.json)
          echo "$CONTAINERS"
          echo "::set-output name=containers::${CONTAINERS}"
